import requests
import time
import re


def take_image(apikey, body):
    response = requests.post(
        "http://goodxevilpay.shop/in.php",
        files=(
            ('method', (None, "buxmoney")),
            ('key', (None, apikey)),
            ('body', (None, body)),
        )
    )
    output = response.text
    if "|" not in output:
        return "FAIL"
    captcha_id = output.split("|")[1]

    index = 0
    output = "CAPCHA_NOT_READY"
    while output == "CAPCHA_NOT_READY":
        index += 1
        if index >= 20:
            return "FAIL"
        time.sleep(1)
        response = requests.get(f"http://goodxevilpay.shop/res.php?key={apikey}&id={captcha_id}")
        output = response.text

    if "coordinates:" not in output:
        return "FAIL"
    output = output.split("coordinates:")[1]
    numbers = re.findall(r'\d+', output)
    if len(numbers) != 2:
        return "FAIL"

    return numbers


if __name__ == '__main__':
    # Надо достать с кода страницы картинку в base64, так же можно сделать скриншот, но зачем, если фото есть в коде страницы
    image = "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"
    # Можно на ru и en языках, точность решения одинаковая
    apikey = "YOUR_API_KEY"

    coordinates = take_image(apikey=apikey, body=image)
    if coordinates == "FAIL":
        print("Капча не решена")
    else:
        print(f"Далее надо нажать по координатам x={coordinates[0]} y={coordinates[1]}")
